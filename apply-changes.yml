name: Apply Changes (Dispatch)
on:
  repository_dispatch:
    types: [apply_changes]

permissions:
  contents: write
  pull-requests: write

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Parse payload
        run: |
          echo '${{ toJson(github.event.client_payload) }}' > payload.json
          cat payload.json

      - name: Prepare branch
        id: branch
        run: |
          BRANCH="gpt5/${{ github.run_id }}-${{ github.run_number }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          git config user.name "gpt5-bot"
          git config user.email "gpt5-bot@users.noreply.github.com"
          git checkout -b "$BRANCH"

      - name: Apply file changes
        run: |
          node -e '
          const fs = require("fs");
          const path = require("path");
          const payload = JSON.parse(fs.readFileSync("payload.json","utf8"));
          if (!Array.isArray(payload.files)) { throw new Error("payload.files must be an array"); }
          for (const f of payload.files) {
            const p = f.path;
            const content = f.base64 ? Buffer.from(f.content, "base64").toString("utf8") : f.content;
            fs.mkdirSync(path.dirname(p), { recursive: true });
            fs.writeFileSync(p, content, "utf8");
            console.log("WROTE", p);
          }'

      - name: Commit
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "GPT-5 apply changes"

      - name: Push branch
        run: |
          git push --set-upstream origin "${{ steps.branch.outputs.BRANCH }}"

      - name: Open PR
        uses: actions/github-script@v7
        with:
          script: |
            const branch = "${{ steps.branch.outputs.BRANCH }}";
            const title = (github.event.client_payload.title ?? "GPT-5 changes");
            const body  = (github.event.client_payload.body  ?? "Automated update from GPT-5.");
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              head: branch,
              base: "main",
              body
            });
            core.info(`PR: ${pr.html_url}`);
