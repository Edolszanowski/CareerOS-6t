powershell -NoProfile -Command "New-Item -ItemType Directory -Force app\api\industry-stats | Out-Null; @'import { NextResponse } from \"next/server\"; import { prisma } from \"@/lib/prisma\"; export async function GET(req: Request) { try { const { searchParams } = new URL(req.url); const industry = (searchParams.get(\"industry\") || \"\").trim().toLowerCase(); const roleLevel = (searchParams.get(\"role_level\") || \"\").trim().toLowerCase(); const sampleLimit = Math.min(parseInt(searchParams.get(\"limit\") || \"200\", 10), 1000); if (!industry) { return NextResponse.json({ ok: false, error: \"Missing ?industry\" }, { status: 400 }); } const sample = await prisma.assessment_responses.findMany({ where: { question_2_industry: industry }, orderBy: { completed_at: \"desc\" }, take: sampleLimit, select: { id: true, ai_readiness_score: true, question_2_industry: true, question_3a_level: true, completed_at: true } }); const industryCount = sample.length; const industryAvg = industryCount > 0 ? Math.round(sample.reduce((s, r) => s + (r.ai_readiness_score ?? 0), 0) / industryCount) : null; let roleAvg: number | null = null; let roleCount = 0; if (roleLevel) { const roleRows = sample.filter((r) => ((r.question_3a_level || \"\").toLowerCase() === roleLevel)); roleCount = roleRows.length; roleAvg = roleCount > 0 ? Math.round(roleRows.reduce((s, r) => s + (r.ai_readiness_score ?? 0), 0) / roleCount) : null; } return NextResponse.json({ ok: true, stats: { industry, industry_avg: industryAvg, industry_count: industryCount, role_level: roleLevel || null, role_avg: roleAvg, role_count: roleCount }, sample: sample.map((r) => ({ id: r.id, score: r.ai_readiness_score, role_level: r.question_3a_level, completed_at: r.completed_at })) }); } catch (e: any) { return NextResponse.json({ ok: false, error: e?.message ?? String(e) }, { status: 500 }); } }'@ | Set-Content -NoNewline -Encoding UTF8 app\api\industry-stats\route.ts"